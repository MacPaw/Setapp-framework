// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Setapp
import BackgroundTasks
import CommonCrypto
import Foundation
import Security
@_exported import Setapp
import Swift
import UIKit
import os
@objc(STPManagerDelegate) public protocol SetappManagerDelegate {
  @objc func setappManager(_ manager: Setapp.SetappManager, didUpdateSubscriptionTo newSetappSubscription: Setapp.SetappSubscription)
}
@_hasMissingDesignatedInitializers @objc(STPManager) open class SetappManager : ObjectiveC.NSObject {
  @objc weak open var delegate: Setapp.SetappManagerDelegate?
  @objc dynamic open var subscription: Setapp.SetappSubscription {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension SetappManager {
  @objc public static let didChangeSubscriptionNotification: Foundation.NSNotification.Name
  @objc(sharedInstance) public static let shared: Setapp.SetappManager
  @objc dynamic open var configuration: Setapp.SetappConfiguration {
    @objc get
    @objc @available(*, deprecated, renamed: "start(with:)")
    set
  }
  @objc(logLevel) dynamic open class var logLevel: Setapp.SetappLogLevel {
    @objc get
    @objc set
  }
  @objc(setLogHandle:) dynamic open class func setLogHandle(_ logHandle: Setapp.SetappLogHandle?)
  @available(*, unavailable, message: "Instance property is no longer available use the class property instead: \"SetappManager.setLogHandle\".")
  @objc(logLevel) dynamic open var logLevel: Setapp.SetappLogLevel {
    @objc get
    @objc set
  }
  @available(*, unavailable, message: "Instance method is no longer available use the class func instead: \"SetappManager.setLogHandle\".")
  @objc(setLogHandle:) dynamic open func setLogHandle(_ logHandle: Setapp.SetappLogHandle?)
  @objc(canOpenURL:) dynamic open func canOpen(url: Foundation.URL) -> Swift.Bool
  @nonobjc open func open(url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any], completionHandler: @escaping (Swift.Result<Setapp.SetappSubscription, Swift.Error>) -> Swift.Void) -> Swift.Bool
  @available(iOS 13.0, *)
  @objc(canOpenURLContexts:) dynamic open func canOpen(urlContexts: Swift.Set<UIKit.UIOpenURLContext>) -> Swift.Bool
  @available(iOS 13.0, *)
  open func open(urlContexts: Swift.Set<UIKit.UIOpenURLContext>, completionHandler: @escaping (Swift.Result<Setapp.SetappSubscription, Swift.Error>) -> Swift.Void)
  @objc(startWithConfiguration:) dynamic open func start(with configuration: Setapp.SetappConfiguration = .default)
  open func viewController(for result: Swift.Result<Setapp.SetappSubscription, Swift.Error>) -> UIKit.UIViewController
  @objc dynamic open var backgroundSessionCompletionHandler: (() -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc dynamic open func isSetappBackgroundSessionIdentifier(_ identifier: Swift.String) -> Swift.Bool
  open func requestAuthorizationCode(clientID: Swift.String, scope: [Setapp.VendorAuthorizationScope], completionHandler: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
}
extension SetappManager {
  @available(swift, obsoleted: 0.1)
  @objc(openURL:options:completionHandler:) dynamic open func open(url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any], completionHandler: @escaping (Setapp.SetappSubscription?, Foundation.NSError?) -> Swift.Void) -> Swift.Bool
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 0.1)
  @objc(openURLContexts:completionHandler:) dynamic open func open(urlContexts: Swift.Set<UIKit.UIOpenURLContext>, completionHandler: @escaping (Setapp.SetappSubscription?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 0.1)
  @objc(viewControllerForSetappSubscription:orError:) dynamic open func viewController(for setappSubscription: Setapp.SetappSubscription?, or error: Foundation.NSError?) -> UIKit.UIViewController?
  @available(swift, obsoleted: 0.1)
  @objc(requestAuthorizationCodeWithClientID:scope:completionHandler:) dynamic open func requestAuthorizationCode(clientID: Swift.String, scope: [Swift.String], completionHandler: @escaping (Foundation.NSString?, Foundation.NSError?) -> Swift.Void)
}
extension DispatchQueue {
}
@_hasMissingDesignatedInitializers @objc(STPSubscription) @objcMembers open class SetappSubscription : ObjectiveC.NSObject {
  @objc final public let isActive: Swift.Bool
  @objc final public let expirationDate: Foundation.Date?
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(STPLogLevel) public enum SetappLogLevel : Swift.Int {
  case verbose
  case debug
  case info
  case warning
  case error
  case off
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension SetappLogLevel : Swift.Comparable {
  public static func < (lhs: Setapp.SetappLogLevel, rhs: Setapp.SetappLogLevel) -> Swift.Bool
}
extension SetappLogLevel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SetappLogLevel : Swift.CaseIterable {
  public static var allCases: [Setapp.SetappLogLevel]
  public typealias AllCases = [Setapp.SetappLogLevel]
}
@objc(STPConfiguration) @objcMembers open class SetappConfiguration : ObjectiveC.NSObject {
  @objc(defaultConfiguration) public static let `default`: Setapp.SetappConfiguration
  @objc final public let publicKeyBundle: Foundation.Bundle
  @objc final public let publicKeyFilename: Swift.String
  @objc(initWithPublicKeyBundle:publicKeyFilename:) public init(publicKeyBundle: Foundation.Bundle?, publicKeyFilename: Swift.String?)
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
extension SetappConfiguration : Swift.Codable {
  open func encode(to encoder: Swift.Encoder) throws
}
public struct VendorAuthorizationScope : Swift.RawRepresentable, Swift.Equatable {
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Setapp.VendorAuthorizationScope.RawValue
  public static let applicationAccess: Setapp.VendorAuthorizationScope
}
public typealias SetappLogHandle = (Swift.String, Setapp.SetappLogLevel) -> Swift.Void
extension Setapp.SetappLogLevel : Swift.Hashable {}
extension Setapp.SetappLogLevel : Swift.RawRepresentable {}
