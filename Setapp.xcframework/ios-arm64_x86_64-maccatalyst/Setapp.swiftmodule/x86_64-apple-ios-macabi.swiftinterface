// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios13.1-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -static -swift-version 5 -enforce-exclusivity=checked -O -module-name Setapp
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppKit
import CommonCrypto
import CoreServices
import Foundation
import IOKit
import ObjectiveC
import Security
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import os
@_hasMissingDesignatedInitializers @objc(STPManager) open class SetappManager : ObjectiveC.NSObject {
  @objc dynamic open var subscription: Setapp.SetappSubscription? {
    @objc get
  }
  open func requestAuthorizationCode(clientID: Swift.String, scope: [Setapp.VendorAuthorizationScope], completionHandler: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  @nonobjc open func open(url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any], completionHandler: @escaping (Swift.Result<Setapp.SetappSubscription, any Swift.Error>) -> Swift.Void) -> Swift.Bool
  @available(iOS 13.0, macCatalyst 13.0, *)
  open func open(urlContexts: Swift.Set<UIKit.UIOpenURLContext>, completionHandler: @escaping (Swift.Result<Setapp.SetappSubscription, any Swift.Error>) -> Swift.Void)
  @objc(canOpenURL:) open func canOpen(url: Foundation.URL) -> Swift.Bool
  @available(iOS 13.0, *)
  @objc(canOpenURLContexts:) open func canOpen(urlContexts: Swift.Set<UIKit.UIOpenURLContext>) -> Swift.Bool
  @objc open var backgroundSessionCompletionHandler: (() -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc open class func isSetappBackgroundSessionIdentifier(_ identifier: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Instance method is deprecated use the class method instead: \"SetappManager.isSetappBackgroundSessionIdentifier\".")
  @objc open func isSetappBackgroundSessionIdentifier(_ identifier: Swift.String) -> Swift.Bool
  @objc deinit
}
extension Setapp.SetappManager {
  @objc public static let didChangeSubscriptionNotification: Foundation.NSNotification.Name
  @objc(sharedInstance) public static let shared: Setapp.SetappManager
  @objc(logLevel) dynamic open class var logLevel: Setapp.SetappLogLevel {
    @objc get
    @objc set
  }
  @objc(setLogHandle:) dynamic open class func setLogHandle(_ logHandle: Setapp.SetappLogHandle?)
  @objc(showReleaseNotesWindowIfNeeded) dynamic open func showReleaseNotesWindowIfNeeded()
  @objc(showReleaseNotesWindow) dynamic open func showReleaseNotesWindow()
  @objc(reportUsageEvent:) dynamic open func reportUsageEvent(_ usageEvent: Setapp.SetappUsageEvent)
  @objc(askUserToShareEmail) dynamic open func askUserToShareEmail()
}
public typealias SetappLogHandle = (_ message: Swift.String, _ logLevel: Setapp.SetappLogLevel) -> Swift.Void
@objc(STPConfiguration) @objcMembers open class SetappConfiguration : ObjectiveC.NSObject, Swift.Codable {
  @objc(defaultConfiguration) public static let `default`: Setapp.SetappConfiguration
  @objc final public let publicKeyBundle: Foundation.Bundle
  @objc final public let publicKeyFilename: Swift.String
  @objc(initWithPublicKeyBundle:publicKeyFilename:) public init(publicKeyBundle: Foundation.Bundle?, publicKeyFilename: Swift.String?)
  required public init(from decoder: any Swift.Decoder) throws
  open func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension Setapp.SetappManager {
  @available(swift, obsoleted: 0.1)
  @objc(requestAuthorizationCodeWithClientID:scope:completionHandler:) dynamic open func requestAuthorizationCode(clientID: Swift.String, scope: [Swift.String], completionHandler: @escaping (_ authorizationCode: Foundation.NSString?, _ error: Foundation.NSError?) -> Swift.Void)
}
public struct VendorAuthorizationScope : Swift.RawRepresentable, Swift.Equatable {
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Setapp.VendorAuthorizationScope.RawValue
  public static let applicationAccess: Setapp.VendorAuthorizationScope
  public static let openAI: Setapp.VendorAuthorizationScope
}
extension Setapp.SetappManager {
  @available(swift, obsoleted: 0.1)
  @objc(openURL:options:completionHandler:) dynamic open func open(url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any], completionHandler: ((_ setappSubscription: Setapp.SetappSubscription?, _ error: Foundation.NSError?) -> Swift.Void)? = nil) -> Swift.Bool
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 0.1)
  @objc(openURLContexts:completionHandler:) dynamic open func open(urlContexts: Swift.Set<UIKit.UIOpenURLContext>, completionHandler: @escaping (_ setappSubscription: Setapp.SetappSubscription?, _ error: Foundation.NSError?) -> Swift.Void)
}
@objc(STPLogLevel) public enum SetappLogLevel : Swift.Int {
  case verbose
  case debug
  case info
  case warning
  case error
  case off
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Setapp.SetappLogLevel : Swift.Comparable {
  public static func < (lhs: Setapp.SetappLogLevel, rhs: Setapp.SetappLogLevel) -> Swift.Bool
}
extension Setapp.SetappLogLevel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Setapp.SetappLogLevel : Swift.CaseIterable {
  public static var allCases: [Setapp.SetappLogLevel]
  public typealias AllCases = [Setapp.SetappLogLevel]
}
@objc(STPUsageEvent) public enum SetappUsageEvent : Swift.Int {
  case signIn
  case signOut
  case userInteraction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(STPManagerDelegate) public protocol SetappManagerDelegate {
  @objc func setappManager(_ manager: Setapp.SetappManager, didUpdateSubscriptionTo newSetappSubscription: Setapp.SetappSubscription)
}
@_hasMissingDesignatedInitializers @objc(STPSubscription) @objcMembers open class SetappSubscription : ObjectiveC.NSObject {
  @objc public var isActive: Swift.Bool {
    @objc get
  }
  @objc public var expirationDate: Foundation.Date? {
    @objc get
  }
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension Setapp.SetappLogLevel : Swift.Hashable {}
extension Setapp.SetappLogLevel : Swift.RawRepresentable {}
extension Setapp.SetappUsageEvent : Swift.Equatable {}
extension Setapp.SetappUsageEvent : Swift.Hashable {}
extension Setapp.SetappUsageEvent : Swift.RawRepresentable {}
