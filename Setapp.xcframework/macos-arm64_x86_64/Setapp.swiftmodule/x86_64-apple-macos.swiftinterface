// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-macos10.10 -enable-objc-interop -autolink-force-load -enable-library-evolution -static -swift-version 5 -enforce-exclusivity=checked -O -module-name Setapp
import AppKit
import Cocoa
import CommonCrypto
import CoreServices
import Foundation
import IOKit
import ObjectiveC
import Security
import Swift
import _Concurrency
import os
@_hasMissingDesignatedInitializers @objc(STPManager) open class SetappManager : ObjectiveC.NSObject {
  @objc dynamic open var subscription: Setapp.SetappSubscription? {
    @objc get
  }
  @objc deinit
}
extension Setapp.SetappManager {
  @objc(sharedInstance) public static let shared: Setapp.SetappManager
  @objc(logLevel) dynamic open class var logLevel: Setapp.SetappLogLevel {
    @objc get
    @objc set
  }
  @objc(setLogHandle:) dynamic open class func setLogHandle(_ logHandle: Setapp.SetappLogHandle?)
  @objc(showReleaseNotesWindowIfNeeded) dynamic open func showReleaseNotesWindowIfNeeded()
  @objc(showReleaseNotesWindow) dynamic open func showReleaseNotesWindow()
  @objc(reportUsageEvent:) dynamic open func reportUsageEvent(_ usageEvent: Setapp.SetappUsageEvent)
  @objc(askUserToShareEmail) dynamic open func askUserToShareEmail()
}
public typealias SetappLogHandle = (_ message: Swift.String, _ logLevel: Setapp.SetappLogLevel) -> Swift.Void
@objc(STPConfiguration) @objcMembers open class SetappConfiguration : ObjectiveC.NSObject {
  @objc(defaultConfiguration) public static let `default`: Setapp.SetappConfiguration
  @objc final public let publicKeyBundle: Foundation.Bundle
  @objc final public let publicKeyFilename: Swift.String
  @objc(initWithPublicKeyBundle:publicKeyFilename:) public init(publicKeyBundle: Foundation.Bundle?, publicKeyFilename: Swift.String?)
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension Setapp.SetappConfiguration : Swift.Codable {
  open func encode(to encoder: Swift.Encoder) throws
}
public struct VendorAuthorizationScope : Swift.RawRepresentable, Swift.Equatable {
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Setapp.VendorAuthorizationScope.RawValue
  public static let applicationAccess: Setapp.VendorAuthorizationScope
}
@available(*, deprecated, renamed: "SetappManager.shared.reportUsageEvent(_:)")
public func SCReportUsageEvent(_ eventName: Swift.String, _ eventInfo: [Swift.AnyHashable : Any]?)
@available(*, deprecated, renamed: "SetappManager.shared.showReleaseNotesWindowIfNeeded()")
public func SCShowReleaseNotesWindowIfNeeded()
@available(*, deprecated, renamed: "SetappManager.shared.showReleaseNotesWindow()")
public func SCShowReleaseNotesWindow()
@available(*, deprecated, renamed: "VendorAuthorizationScope")
public enum SCVendorAppScope : Swift.String {
  case applicationAccess
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(*, deprecated, renamed: "SetappManager.shared.requestAuthorizationCode(clientID:scope:completionHandler:)")
public func SCRequestAuthorizationCode(_ clientID: Swift.String, _ scope: [Setapp.SCVendorAppScope], _ completionHandler: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
@available(*, deprecated, renamed: "SetappManager.logLevel")
public func SCEnableDebugLogging(_ shouldEnable: Swift.Bool)
@available(*, unavailable, message: "From now on SetappManager.shared.askToShareEmail will handle cooldown process.")
public enum SCUserEmailSharingResponse {
}
@available(*, unavailable, message: "From now on SetappManager.shared.askToShareEmail will handle cooldown process.")
public func SCGetLastUserEmailSharingResponse() -> Setapp.SCUserEmailSharingResponse
@available(*, unavailable, renamed: "SetappManager.shared.askToShareEmail")
public func SCAskUserToShareEmail(_ completionHandler: @escaping (Setapp.SCUserEmailSharingResponse) -> Swift.Void) -> Swift.Bool
@objc(STPLogLevel) public enum SetappLogLevel : Swift.Int {
  case verbose
  case debug
  case info
  case warning
  case error
  case off
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Setapp.SetappLogLevel : Swift.Comparable {
  public static func < (lhs: Setapp.SetappLogLevel, rhs: Setapp.SetappLogLevel) -> Swift.Bool
}
extension Setapp.SetappLogLevel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Setapp.SetappLogLevel : Swift.CaseIterable {
  public static var allCases: [Setapp.SetappLogLevel]
  public typealias AllCases = [Setapp.SetappLogLevel]
}
extension Setapp.SetappManager {
  open func requestAuthorizationCode(clientID: Swift.String, scope: [Setapp.VendorAuthorizationScope], completionHandler: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
}
extension Setapp.SetappManager {
  @available(swift, obsoleted: 0.1)
  @objc(requestAuthorizationCodeWithClientID:scope:completionHandler:) dynamic open func requestAuthorizationCode(clientID: Swift.String, scope: [Swift.String], completionHandler: @escaping (_ authorizationCode: Foundation.NSString?, _ error: Foundation.NSError?) -> Swift.Void)
}
@objc(STPUsageEvent) public enum SetappUsageEvent : Swift.Int {
  case signIn
  case signOut
  case userInteraction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(STPManagerDelegate) public protocol SetappManagerDelegate {
  @objc func setappManager(_ manager: Setapp.SetappManager, didUpdateSubscriptionTo newSetappSubscription: Setapp.SetappSubscription)
}
@_hasMissingDesignatedInitializers @objc(STPSubscription) @objcMembers open class SetappSubscription : ObjectiveC.NSObject {
  @objc public var isActive: Swift.Bool {
    @objc get
  }
  @objc public var expirationDate: Foundation.Date? {
    @objc get
  }
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@available(*, deprecated, renamed: "VendorAuthorizationScope")
extension Setapp.SCVendorAppScope : Swift.Equatable {}
@available(*, deprecated, renamed: "VendorAuthorizationScope")
extension Setapp.SCVendorAppScope : Swift.Hashable {}
@available(*, deprecated, renamed: "VendorAuthorizationScope")
extension Setapp.SCVendorAppScope : Swift.RawRepresentable {}
extension Setapp.SetappLogLevel : Swift.Hashable {}
extension Setapp.SetappLogLevel : Swift.RawRepresentable {}
extension Setapp.SetappUsageEvent : Swift.Equatable {}
extension Setapp.SetappUsageEvent : Swift.Hashable {}
extension Setapp.SetappUsageEvent : Swift.RawRepresentable {}
